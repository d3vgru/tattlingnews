<?php
/**
* @file tattler_semantics.module
*/

/**
 * Implementation of hook_views_api().
 */
function tattler_semantics_views_api() {
  return array('api' => 2.0);
}


/**function tattler_semantics_init() {
  $vocabs = tattler_semantics_tracked_entity_vocabs();
  dpm($vocabs);
}**/

function tattler_semantics_views_query_alter(&$view, &$query) {
  
  if ($view->name != 'ttlr_semantic_views') return;
  
  $vocab_ids = tattler_semantics_tracked_entity_vocabs();
  $vocab_ids = implode(',', $vocab_ids);
  //dpm($vocab_ids);
  
  $query->where[0]['clauses'][] = 'term_data.vid in (' . $vocab_ids . ')';
  
  $query->add_field ('term_data', 'tid', 'term_data_tid');
  $query->add_field ('vocabulary', 'vid', 'vocabulary_vid');   
  
  /** User-interface query filters are re-used from the mentions list **/
  tattlerui_mention_list_views_query_alter($view, $query);
    
}


function tattler_semantics_theme($existing) {  
  $themes = array();

  //-- Recordset-level theme
    
  $key = 'views_view_list__ttlr_semantic_views__block';
  $tpl_path = 'themes/' . str_replace('_', '-', $key); 

  $themes[$key] = array (
    'arguments' => array('view' => NULL, 
                         'options' => NULL, 
                         'rows' => NULL, 
                         'title' => NULL,                                                   
                         ),
    'template' => $tpl_path,
    'original hook' => 'views_view_fields',
  );

  //-- Row-level theme
  $key = 'views_view_fields__ttlr_semantic_views__block';
  $tpl_path = 'themes/' . str_replace('_', '-', $key); 

  $themes[$key] = array (
    'arguments' => array('view' => NULL, 
                         'options' => NULL, 
                         'row' => NULL, 
                         'field_alias' => NULL),
    'template' => $tpl_path,
    'original hook' => 'views_view_fields',
  );
  
  return $themes;
}


/** 
* Let Views serve default theme implementation from the module, but also allow overriding it from theme folder.
* @disabled
*/
function __tattler_semantics_theme_registry_alter(&$theme_registry) {
  $module = 'tattler_semantics';
  
  
  $tpl_path = drupal_get_path("module",$module) ."/themes";
  
  dpm($theme_registry);
} 


function tattler_semantics_attach_block_css() {
  $module_path = drupal_get_path('module', 'tattler_semantics');
  $css_path = $module_path . '/tattler_semantics.css';

  drupal_add_css($css_path, 'module');
}

function tattler_semantics_vocabname_to_css_class($name) {
  $clazz = strtolower($name);
  
  if ($clazz == 'city' || $clazz == 'province or state') {
    $clazz = 'location';
  }
  
  return $clazz;
}

function tattler_semantics_tracked_entity_vocabs($only_ids = TRUE) {
  
  $entities = variable_get('calais_vocabulary_names', NULL);
  
  $vocabs = array();
  
  //if (empty($_GET['topic']) || !is_numeric($_GET['topic'])) { //if not filtering by topic
  //  $topics =  tattlerui_get_topic_titles('array'); 
  //  $vocabs['Topics'] = array_keys($topics);
  //}
  
  if ($only_ids) {
    $vocabs =  array ($entities['Person'],
                      $entities['Organization'],
                      $entities['Company'],
                      $entities['City'],
                      $entities['ProvinceOrState'],    
                     );
  }
  else {
    $vocabs['People'] = array($entities['Person']);
    $vocabs['Organizations'] = array($entities['Organization']);  
    $vocabs['Companies'] = array($entities['Company']);    
    $vocabs['Locations'] = array($entities['City'], $entities['ProvinceOrState']);      
  }
  
  return $vocabs;       
}