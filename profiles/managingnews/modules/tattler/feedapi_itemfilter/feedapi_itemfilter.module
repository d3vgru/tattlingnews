<?php
// $Id: feedapi_itemfilter.module,v 1.1 2008/05/27 19:54:22 milosh Exp $

/**
 * @file
 * FeedAPI Item Filter module
 *
 * The purpose of this module is to provide a possibility to extend a FeedAPI module with
 * a filter, that filters out such feed items that are not worth saving in the database at all.
 *
 * This filter implements FeedAPI's hook_feedapi_after_parse()
 *
 * This module provides its own hook -- hook_feedaapi_itemfilter($op, &$feed, &$options).
 * This hook has two $op parameters_
 *  - $op = 'settings' is used in order to add settings form into feed.
 *  - $op = 'process' is used in order to process filtering on the feed
 *
 * ---
 * @todo Separate module: Preg_match support for regular expressions
 * @todo Let user choose the field(s) where keyword search is implemented
 */

/**
 * Implementation of FeedAPI's hook_feedapi_settings_form()
 *
 * @param $type
 *  A string of form type ('general', 'processor', 'parser')
 * @return
 *  Drupal Form API array
 */
function feedapi_itemfilter_feedapi_settings_form($type) {
  // Content type form.
  if ($type == 'general') { //general

    // General array
    $form['feedapi']['itemfilter'] = array(
      '#type' => 'fieldset',
      '#title' => t('Item filters'),
      '#description' => t('Feedapi item filters will check feed items against filter critera -- any item, that does not fulfill criteria will not be included in the feed.'),
      '#tree' => TRUE,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );

    // Collect filters' settings trough hook
    $filters = module_implements('feedapi_itemfilter', TRUE);
    rsort($filters);
    foreach ($filters as $module) {
      $func = $module .'_feedapi_itemfilter';
      // Get additional settings from filters
      $form['feedapi']['itemfilter'][$module] = array(
        '#type' => 'fieldset',
        '#title' => feedapi_itemfilter_get_natural_name($module),
        '#tree' => TRUE,
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      //$form_additional = $func('settings', $df=array(), $tr=array());
      $form['feedapi']['itemfilter'][$module] = array_merge_recursive($form['feedapi']['itemfilter'][$module], $func('settings', $df=array(), $tr=array()));
      $form['feedapi']['itemfilter'][$module]['#weight'] = $node_type_settings['itemfilter'][$module]['weight'];
      $form['feedapi']['itemfilter'][$module]['enabled'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable filter'),
        '#description' => t('Check if you want to use this filter.'),
        '#default_value' => $node_type_settings['itemfilter'][$module]['enabled'],
        '#weight' => -14,
      );
      $form['feedapi']['itemfilter'][$module]['weight'] = array(
        '#type' => 'weight',
        '#delta' => 15,
        '#title' => t('Weight'),
        '#description' => t('Control the execution order. Filters with lower weights are called before filters with higher weights.'),
        '#default_value' => $node_type_settings['itemfilter'][$module]['weight'],
        '#weight' => -13,
      );
    }

    return $form;
  }
}

/**
 * Implementation of FeedAPI's feedapi_after_parse call
 *
 * @param &$feed
 *  Array of parsed feed
 */
function feedapi_itemfilter_feedapi_after_parse(&$feed)
{
  // First, we have to find out keyword filter settings.

  // When the node is refreshed, then the settings are available from $feed->settings.
  if (!empty($feed->settings['feedapi']['itemfilter'])) {
    $options = $feed->settings['feedapi']['itemfilter'];
  }
  // But when the node is inserted then the $feed->settings is not available
  // and we have to obatin them from $_POST.
  elseif (!empty($_POST['feedapi']['feedapi']['itemfilter'])) {
    $options = $_POST['feedapi']['feedapi']['itemfilter'];
  }
  // When the refresh is called from cron.php neither of the above
  // may not work, but fortunatelly we have $feed->nid present.
  elseif ($feed->nid > 0) {
    $node = node_load($feed->nid);
    $options = $node->feed->settings['feedapi']['itemfilter'];
  }
  // This is last try - when the node is updated then the none of above will work and the only way
  // to recover the settings is obataining nid from http address arguments.
  //
  // @todo Is this REALLY the only option here? The relyable results are not guaranteed, especially
  // when user has played around with the path.
  elseif (is_numeric(arg(1))) {
    $node = node_load(arg(1));
    $options = $node->feed->settings['feedapi']['itemfilter'];
  }
  // Anyway, if none of above worked then we are skrewed. Let the user know about it.
  else {
    drupal_set_message(t('Feedapi filter could not detect the feed. Filtering was not carried out. You may need to remove the feed items and try to refresh the feed manually.'), 'error');
    return;
  }

  // Provide hook so we can have extendable filtering system.

  // Find filters.
  $filters = module_implements('feedapi_itemfilter', TRUE);
  $modules = array();

  // Set filter order.
  foreach ($filters as $module) {
    //if ($options[$module]['enabled']) {
      $modules[$options[$module]['#weight']] = $module .'_feedapi_itemfilter';
    //}
  }
  rsort($modules);

  // Run enabled filters.
  foreach ($modules as $func) {
    $func('process', $feed, $options[$module]);
  }
}

/**
 * Get the module-defined natural name of FeedAPI filter
 * Define this name in hook_help():
 *
 *  function hook_help($section) {
 *    switch ($section) {
 *      case 'feedapi/itemfilter/full_name':
 *        return t('Natural name');
 *        break;
 *      }
 *    }
 */
function feedapi_itemfilter_get_natural_name($module) {
  $help = $module .'_help';
  $module_natural = function_exists($help) ? $help('feedapi/itemfilter/full_name') : t($module);
  return empty($module_natural) ? t($module) : $module_natural;
}
