<?php

/**
* hook_init implementation. Loads included files.
*/
function feedapi_source_init() {
  
  $currpath = dirname(__FILE__);
  
  require_once($currpath . '/feedapi_source.inc');
  require_once($currpath . '/data_providers/data_provider.inc');
  require_once($currpath . '/data_providers/technorati.inc');
  require_once($currpath . '/feedapi_source.class.php' );
      
}

/**
* Initialize the data provider plugins. These providers are not
* independent modules, because that would require significant
* amount of additional code to support CCK-based decoration of the
* source node type, but there is still some level of decoupling
* and auto-discovery provided.
*/
function feedapi_source_init_data_providers() {
  
  $providers = array();

  $pathes = glob(dirname(__FILE__) . "/data_providers/*.inc");
  if (is_array($pathes)) {
    foreach ($pathes as $path) {
      $filename = pathinfo($path, PATHINFO_FILENAME);
      if ($filename != 'data_provider') {
        $obj = new stdClass();
        $obj->key = $filename;
        $obj->implClass = ucfirst($filename) . 'DataProvider';
        $obj->fullPath = $path;
        $providers[$filename] = $obj;
      }
    }
  }  
  
  
  feedapi_source_data_providers($providers);
  
  return $providers;
}


/**
* Saves statically an array of providers (if argument is not null)
* and/or returns the array of providers.
*/
function feedapi_source_data_providers($arg_providers = null) {
  static $providers;
  
  if (!empty($arg_providers)) {  
    $providers = $arg_providers;
  }
  
  // On-demand initialization to optimize performance.
  if (empty($providers) && $arg_providers == null) { //try initialization only during "Read" attempt to avoid infinite loop
    $providers = feedapi_source_init_data_providers();
  }
  
  return $providers;
}

function feedapi_source_menu() {
  $items = array();
 
  $items['admin/settings/feedapi-source'] = array(
    'title' => 'FeedAPI Source module settings',
    'description' => 'Configuration options for the FeedAPI Source module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feedapi_source_settings'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
   );

  /* Testing only  */
  $items['feedapisource/test'] = array(
    'title' => 'FeedAPISource Test',
    'page callback' => 'feedapi_source_test',
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}


function feedapi_source_test() {

  //disabled
  return "ok"; 

  //feedapi_source_cron();
  //return('   done   ');

//    $testFeedURL = "http://www.freshblurbs.com/joomla-stole-world-bank-logo"; 
//    $source = new MentionSourceExtractor ( $testFeedURL, "get_source_url" );    
        

//    $src_node = new stdClass();
//    $src_node->field_url[0]['value'] = 'http://twitter.com/Proclaim_Me';
//    _feedapi_source_set_source_data($src_node);    
//    
//    dpm($src_node);
//    return "ok";



$providers = feedapi_source_data_providers();

if (is_array($providers)) {
  foreach ($providers as $provider) {
    require_once($provider->fullPath);
    $pp = new $provider->implClass;
    if (method_exists($pp, 'cron')) {
      if ($provider->implClass == 'FaviconDataProvider') {
        $pp->cron();
      }
    }
  }
}

return "ok";

    
        
//    feedapi_source_cron();
    
//    return "     ";
    
    $key = arg(2);
    $key = empty($key) ? 0 : $key;
    
    $test = array(
      'http://www.phase2technology.com/test?key=val&key2=val2http',
      'http://news.google.com/news/url?sa=T&ct=us/2-0&fd=R&url=http://online.wsj.com/article/BT-CO-20090326-717149.html&cid=1321084381&ei=rRPMSfbZOsGosAbcpLD0DQ&usg=AFQjCNGkhhKeMJC8b6ElwSaxEQe2AliTGw',
      'http://news.google.com/news/url?sa=T&ct=us/2-0&fd=R&url=http://online.wsj.com/article/BT-CO-20090326-717149.html%3Fkey=value&amp;key2=val2&cid=1321084381&ei=rRPMSfbZOsGosAbcpLD0DQ&usg=AFQjCNGkhhKeMJC8b6ElwSaxEQe2AliTGw',
      'http://news.google.com/news/url?sa=T&ct=us/2-0&fd=R&url=http://online.wsj.com/article/BT-CO-20090326-717149.html%3Fkey=value&amp;key2=val2&cid=13210&#169;84381&ei=rRPMSfbZOsGosAbcpLD0DQ&usg=AFQjCNGkhhKeMJC8b6ElwSaxEQe2AliTGw',
      'http://xml.truveo.com/rd?i=4049994057&a=rss&p=1',
      'http://feeds.digg.com/~r/digg/popular/~3/4DpDTazAbFU/Baffling_Safe_Sex_Poster_Found_in_Taiwan_PIC',
      'http://digg.com/environment/Leaked_Report_Biofuels_Are_the_Cause_of_Global_Food_Crisis',
      'http://google.com', //http redirect test
      'htpp://thisdomainwillneverexistdrupal.com', //non-existant URL
      'http://feedproxy.google.com/~r/SocialMediaAnalysis/~3/9-QGLHAATew/buzzmonitor-refreshed-as-tattler-app.html',
    );
    
    $extractor = new MentionSourceExtractor($test[$key]);
    $url = $extractor->getOriginalURL();
    dpm("Destination URL: $url");
    
    
    return ("SUCCESS");
}

/**
 * Implementation of hook_cron
 */
function feedapi_source_cron() {
  $providers = feedapi_source_data_providers();
  
  if (is_array($providers)) {
    foreach ($providers as $provider) {
      require_once($provider->fullPath);
      $pp = new $provider->implClass;
      if (method_exists($pp, 'cron')) {
        $pp->cron();
      }
    }
  }
}

/**
* Implementation of  hook_feedapi_item()
*/
function feedapi_source_feedapi_item($op) {
  //empty
}

/**
 * Implementation of hook_nodeapi
 */
function feedapi_source_nodeapi(&$node, $op) {

  if ($node->type == 'mention') {
    switch ($op) {
      case 'presave':
        _feedapi_source_mention_remove_redirects($node);
        _feedapi_source_process_mention($node);
        break;
      case 'delete':
        _feedapi_source_recalc_mentions_count($node);
        break;
      case 'update':
        _feedapi_source_recalc_mentions_count($node);
        break;
      case 'insert':
        _feedapi_source_recalc_mentions_count($node);
        break;
        
    }
  }
  if ($node->type == SOURCE_CONTENT_TYPE) {
    switch ($op) {
      case 'presave':
        _feedapi_source_set_source_data($node);
        break;
    }
  }
}

/**
 * Implementation of hook_requirements
 */
function feedapi_source_requirements($phase) {
  $requirements = array();

  if ($phase == 'runtime') {
    if (variable_get('feedapi_source_aws_access_key_id', '') == ''
      || variable_get('feedapi_source_aws_secret_access_key', '') == '')
      $requirements['aws_keys'] = array(
        'title' => t('Amazon Web Services Keys'),
        'description' => t('The AWS keys necessary to contact the Alexa web service are missing. They can be set '. l('here', 'admin/settings/feedapi-source') . '.'),
        'severity' => REQUIREMENT_WARNING
      ); 

    if (variable_get('feedapi_source_technorati_api_key', '') == '')
      $requirements['technorati_key'] = array(
        'title' => t('Technorati API Key'),
        'description' => t('The Technorati API key is missing.  It can be set ' . l('here', 'admin/settings/feedapi-source') . '.'),
        'severity' => REQUIREMENT_WARNING
      );
  }

  return $requirements;
}

/**
 * If the mention URL is a redirect clean it up and replace the original.
 */
function _feedapi_source_mention_remove_redirects(&$mention_node) {

  if (empty($mention_node->nid)) {
    $mention_url = $mention_node->feedapi->feed_item->options->original_url;
  } else {
    $mention_url = _feedapi_source_get_mention_url($mention_node->nid);
  }

  $extractor = new MentionSourceExtractor($mention_url);
  $mention_url = $extractor->getOriginalURL();

  // If it is new save the real destination if we were able to extract it.
  if (empty($mention_node->nid)) {
    $mention_node->feedapi->feed_item->options->original_url = $mention_url;
  }
  else {
    db_query("UPDATE {feedapi_node_item} SET url = '%s' WHERE nid = %d", $mention_url, $mention_node->nid);
  }
 
}

/**
 * Main function that will identify, create, and link the source node if the given mention node
 * has not already been assigned a source.
 */
function _feedapi_source_process_mention(&$mention_node) {
  // Only determine the source if it hasn't already been set
  if (_feedapi_source_is_source_identified($mention_node))
    return;

  if (empty($mention_node->nid)) {
    $mention_url = $mention_node->feedapi->feed_item->options->original_url;
  } else {
    $mention_url = _feedapi_source_get_mention_url($mention_node->nid);
  }

  // extractor seems to return '://' when it can't figure out the URL
  if (strlen(trim($mention_url)) <= 3) { 
    error_log (t('FEEDAPI_SOURCE: Could not determine source for mention with nid: ') . $mention_node->nid);
  }

  $source = new MentionSourceExtractor($mention_url, "get_source_url");

  if (strlen(trim($source->getTitle())) <= 5)
    $source_title = $source->getURL();
  else
    $source_title = $source->getTitle();

  $source_nid = _feedapi_source_create_source($source_title, $source->getURL());
  $mention_node->{MENTION_SOURCE_FIELD}[0]['nid'] = $source_nid; 
}

/**
* Re-calculate mentions count for a source. Called at every new mention insert or delete.
* Having mention count pre-saved, significantly speeds up using mention count in queries 
* (e.g. for Most Buzz view).
*
* @param op an 'insert' or a 'delete'
*
*/
function _feedapi_source_recalc_mentions_count($mention_node) {
  
  $source_nid = $full_mention_node->{MENTION_SOURCE_FIELD}[0]['nid'];
  
  if (empty($source_nid) || $source_nid<1) {
    $mention_node = node_load($mention_node->nid); //if mention node was not fully loaded as in: when called from quick node edit.
    $source_nid = $mention_node->{MENTION_SOURCE_FIELD}[0]['nid'];
  }
  
  if (empty($source_nid) || $source_nid<1) return;
  
    
  $source_nid_name = MENTION_SOURCE_FIELD . "_nid";
  $sql = "SELECT count(*) FROM {content_type_mention} where %s = %d";
  $num_of_mentions = db_result(db_query($sql, $source_nid_name, $source_nid));
      
  if ($num_of_mentions > -1) {
  
    $sql = "UPDATE {content_type_" . SOURCE_CONTENT_TYPE . "}
                       SET ".MENTION_COUNT_FIELD."_value=%d 
                       WHERE nid=%d";

    db_query($sql, $num_of_mentions, $source_nid);
  
  }
  
  _feedapi_source_cck_cache_evoke_item($source_nid);
  
  return;
}


/**
* Evoke a specific item off of cck cache. Required by routines that update CCK tables directly.
*/
function _feedapi_source_cck_cache_evoke_item($nid, $vid=NULL) {
  if (empty($vid)) $vid = $nid;
  
  $cid = "content:$nid:$vid";
  db_query("DELETE FROM {cache_content} WHERE cid='%s'", $cid);
  
}

/**
 * Determines if a mention node has already been assigned a source.
 */
function _feedapi_source_is_source_identified($mention_node) {

  return is_array($mention_node->{MENTION_SOURCE_FIELD})
    && is_array($mention_node->{MENTION_SOURCE_FIELD}[0]) 
    && !empty($mention_node->{MENTION_SOURCE_FIELD}[0]['nid']);
}

/**
 * Returns the URL from which feedapi generated the given mention node ID.
 */
function _feedapi_source_get_mention_url($mention_nid){
  $url = db_result(db_query("SELECT url FROM {feedapi_node_item} WHERE nid = %d", $mention_nid));
  if(!$url) {
    return NULL;
  }
  return $url;
}

/**
 * Returns the node ID for the source node that corresponds to the given URL.
 * If a source node already exists with the given URL, the ID of that source node will be returned.
 * If a source node does not exist with the given URL, one will be created and the ID of that node will be returned.
 */ 
function _feedapi_source_create_source($title, $url) {
  
  $source_nid = _feedapi_source_find_source_nid($url);
  
  if ($source_nid == NULL) {
    $source = new stdClass();
    $source->type = SOURCE_CONTENT_TYPE;
    if (strlen(trim($title)) == 0) {
      $source->title = $url;
    }
    else {
      $source->title = $title;
    }
    $source->{SOURCE_URL_FIELD}[0]['value'] = $url;
    $source->{MENTION_COUNT_FIELD}[0]['value'] = 1;
    $source_nid = $source->nid;
    node_save($source);    
    
    $source_nid = $source->nid;
  } 

  return $source_nid;
}

/**
 * Returns the ID of the source node with the given URL, or NULL if no node exists with that URL. 
 * The function also tries to identify duplicates, e.g. the fact that youtube.com and www.youtube.com
 * are same deal.
 */
function _feedapi_source_find_source_nid($url) {
  
  //Make sure 'http, https and domains with or without "www"' are not identified as different sources.
  $pattern = '#^.+?://(www\.)?(.+)#ims';
  $url_min = trim(preg_replace($pattern, '\2', $url));
  $url_field_name = SOURCE_URL_FIELD . '_value';
      
  $query = db_query("SELECT nid, %s 
                     FROM {content_type_" . SOURCE_CONTENT_TYPE . "} 
                     WHERE %s like '%%%s'", $url_field_name, $url_field_name, $url_min);
  $source_nid = NULL;                   
  while ($obj = db_fetch_object($query)) { //Previous query will return legit subdomains as well, need to weeed those out.
    $db_url = $obj->$url_field_name;
    $db_url = trim(preg_replace($pattern, '\2', $db_url));
    if ($db_url == $url_min) {
      $source_nid = $obj->nid;
      break;
    }
  }
  
  return $source_nid;
}

/**
 * Implementation of hook_feedapi_settings_form().
 * $type is either "processor" or "parser"
 */
function feedapi_source_feedapi_settings_form($type) {
  $form = array();
  
  switch ($type) {
    case 'processors':
      $form['extract_source'] = array(
        '#type' => 'checkbox',
        '#title' => t('Feed Sources are extracted off of feed items.'),
        '#default_value' => TRUE,
      );
      break;
  }
  return $form;
}

/**
 * Main entry function for gathering and setting external data about the source URL
 */
function _feedapi_source_set_source_data(&$source_node) {

  $providers = feedapi_source_data_providers();
  
  if (is_array($providers)) {
    foreach ($providers as $provider) {
      require_once($provider->fullPath);
      $pp = new $provider->implClass;
      $pp->attachData($source_node);
    }
  }

}

function feedapi_source_settings() {

  $form['feedapi_source_compete_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Compete.com API Key'),
    '#default_value' => variable_get('feedapi_source_compete_api_key', ''),
    '#size' => 50,
    '#maxlength' => 50,
    '#description' => t('You can get a Compete.com API Key ' . l('here', 'http://developer.compete.com/member/register', array('attributes' => array('target' => '_blank'))) . '.')
  );

  $form['feedapi_source_technorati_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Technorati API Key'),
    '#default_value' => variable_get('feedapi_source_technorati_api_key', ''),
    '#size' => 50,
    '#maxlength' => 50,
    '#description' => t('You can get a Technorati API Key ' . l('here', 'http://technorati.com/developers/apikey.html', array('attributes' => array('target' => '_blank'))) . '.')
  );

  $form['feedapi_source_aws_access_key_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Amazon Web Services (AWS) Access Key ID'),
    '#default_value' => variable_get('feedapi_source_aws_access_key_id', ''),
    '#size' => 25,
    '#maxlength' => 50,
    '#description' => t('You can get an AWS account ' . l('here', 'http://aws.amazon.com/account/', array('attributes' => array('target' => '_blank'))) . '. This account must also be subscribed to the Alexa Web Information Service: ' . l('http://aws.amazon.com/awis', 'http://aws.amazon.com/awis', array('attributes' => array('target' => '_blank'))) . '.')
  );

  $form['feedapi_source_aws_secret_access_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Amazon Web Services (AWS) Secret Access Key'),
    '#default_value' => variable_get('feedapi_source_aws_secret_access_key', ''),
    '#size' => 50,
    '#maxlength' => 50,
    '#description' => t('Be sure to keep this key private. It is only used by Buzzmonitor to generate the hash that will be sent to AWS for authentication purposes.')
  );

  $form['feedapi_source_alexa_rank_weight'] = array(
    '#type' => 'textfield',
    '#title' => t('Alexa Rank Weight (between 0 and 1)'),
    '#description' => t('Weight with which this score enters the combined weight'),    
    '#default_value' => variable_get('feedapi_source_alexa_rank_weight', 1),
    '#size' => 5
  );

  $form['feedapi_source_technorati_rank_weight'] = array(
    '#type' => 'textfield',
    '#title' => t('Technorati Rank Weight (between 0 and 1)'),
    '#default_value' => variable_get('feedapi_source_technorati_rank_weight', 1),
    '#description' => t('Weight with which this score enters the combined weight'),
    '#size' => 5
  );

  $form['feedapi_source_compete_rank_weight'] = array(
    '#type' => 'textfield',
    '#title' => t('Compete Rank Weight (between 0 and 1)'),
    '#default_value' => variable_get('feedapi_source_compete_rank_weight', 1),
    '#description' => t('Weight with which this score enters the combined weight'),
    '#size' => 5
  );

  return system_settings_form($form);
}


function feedapi_source_help($section) {
  switch ($section) {
    case 'admin/help#feedapi_source':
      return t('FeedAPI Source Extractor - extract source feed off of feed items aggregated through non-primary feeds.');
    case 'feedapi/full_name':
      return t('FeedAPI Source Extractor - extract source feed off of feed items aggregated through non-primary feeds.');
  }
}


/**
* Ripoff off of drupal_http_request, with two MAJOR additions: 
*
* @param $timeout (in sec)
*   socket timeout length
* @param $size_limit (in KB)
*   allows to grab only part of the remote resource (HTML). We mostly need very small part: header and title, so this
*   helps performance significantly.
*/
function feedapi_source_http_request($url, $headers = array(), $method = 'GET', $data = NULL, $retry = 3,
                                     $size_limit = 10, $timeout = 5) {
  global $db_prefix;

  $result = new stdClass();

  // Parse the URL and make sure we can handle the schema.
  $uri = parse_url($url);

  if ($uri == FALSE) {
    $result->error = 'unable to parse URL';
    $result->code = -1001;
    return $result;
  }

  if (!isset($uri['scheme'])) {
    $result->error = 'missing schema';
    $result->code = -1002;
    return $result;
  }

  switch ($uri['scheme']) {
    case 'http':
      $port = isset($uri['port']) ? $uri['port'] : 80;
      $host = $uri['host'] . ($port != 80 ? ':'. $port : '');
      $fp = @fsockopen($uri['host'], $port, $errno, $errstr, $timeout);
      break;
    case 'https':
      // Note: Only works for PHP 4.3 compiled with OpenSSL.
      $port = isset($uri['port']) ? $uri['port'] : 443;
      $host = $uri['host'] . ($port != 443 ? ':'. $port : '');
      $fp = @fsockopen('ssl://'. $uri['host'], $port, $errno, $errstr, $timeout);
      break;
    default:
      $result->error = 'invalid schema '. $uri['scheme'];
      $result->code = -1003;
      return $result;
  }

  // Make sure the socket opened properly.
  if (!$fp) {
    // When a network error occurs, we use a negative number so it does not
    // clash with the HTTP status codes.
    $result->code = -$errno;
    $result->error = trim($errstr);

    // Mark that this request failed. This will trigger a check of the web
    // server's ability to make outgoing HTTP requests the next time that
    // requirements checking is performed.
    // @see system_requirements()
    variable_set('drupal_http_request_fails', TRUE);

    return $result;
  }

  // Construct the path to act on.
  $path = isset($uri['path']) ? $uri['path'] : '/';
  if (isset($uri['query'])) {
    $path .= '?'. $uri['query'];
  }

  // Create HTTP request.
  $defaults = array(
    // RFC 2616: "non-standard ports MUST, default ports MAY be included".
    // We don't add the port to prevent from breaking rewrite rules checking the
    // host that do not take into account the port number.
    'Host' => "Host: $host",
    'User-Agent' => 'User-Agent: Drupal (+http://drupal.org/)',
  );

  // Only add Content-Length if we actually have any content or if it is a POST
  // or PUT request. Some non-standard servers get confused by Content-Length in
  // at least HEAD/GET requests, and Squid always requires Content-Length in
  // POST/PUT requests.
  $content_length = strlen($data);
  if ($content_length > 0 || $method == 'POST' || $method == 'PUT') {
    $defaults['Content-Length'] = 'Content-Length: '. $content_length;
  }

  // If the server url has a user then attempt to use basic authentication
  if (isset($uri['user'])) {
    $defaults['Authorization'] = 'Authorization: Basic '. base64_encode($uri['user'] . (!empty($uri['pass']) ? ":". $uri['pass'] : ''));
  }

  // If the database prefix is being used by SimpleTest to run the tests in a copied
  // database then set the user-agent header to the database prefix so that any
  // calls to other Drupal pages will run the SimpleTest prefixed database. The
  // user-agent is used to ensure that multiple testing sessions running at the
  // same time won't interfere with each other as they would if the database
  // prefix were stored statically in a file or database variable.
  if (is_string($db_prefix) && preg_match("/^simpletest\d+$/", $db_prefix, $matches)) {
    $defaults['User-Agent'] = 'User-Agent: ' . $matches[0];
  }

  foreach ($headers as $header => $value) {
    $defaults[$header] = $header .': '. $value;
  }

  $request = $method .' '. $path ." HTTP/1.0\r\n";
  $request .= implode("\r\n", $defaults);
  $request .= "\r\n\r\n";
  $request .= $data;

  $result->request = $request;

  fwrite($fp, $request);

  // Fetch response.
  $response = ''; $iterations = 0;
  while (!feof($fp) && $chunk = fread($fp, 1024)) {

    $response .= $chunk;
    if ($iterations == $size_limit) { break; } //exit
    $iterations++;
    
  }
  fclose($fp);

  // Parse response.
  list($split, $result->data) = explode("\r\n\r\n", $response, 2);
  $split = preg_split("/\r\n|\n|\r/", $split);

  list($protocol, $code, $text) = explode(' ', trim(array_shift($split)), 3);
  $result->headers = array();

  // Parse headers.
  while ($line = trim(array_shift($split))) {
    list($header, $value) = explode(':', $line, 2);
    if (isset($result->headers[$header]) && $header == 'Set-Cookie') {
      // RFC 2109: the Set-Cookie response header comprises the token Set-
      // Cookie:, followed by a comma-separated list of one or more cookies.
      $result->headers[$header] .= ','. trim($value);
    }
    else {
      $result->headers[$header] = trim($value);
    }
  }

  $responses = array(
    100 => 'Continue', 101 => 'Switching Protocols',
    200 => 'OK', 201 => 'Created', 202 => 'Accepted', 203 => 'Non-Authoritative Information', 204 => 'No Content', 205 => 'Reset Content', 206 => 'Partial Content',
    300 => 'Multiple Choices', 301 => 'Moved Permanently', 302 => 'Found', 303 => 'See Other', 304 => 'Not Modified', 305 => 'Use Proxy', 307 => 'Temporary Redirect',
    400 => 'Bad Request', 401 => 'Unauthorized', 402 => 'Payment Required', 403 => 'Forbidden', 404 => 'Not Found', 405 => 'Method Not Allowed', 406 => 'Not Acceptable', 407 => 'Proxy Authentication Required', 408 => 'Request Time-out', 409 => 'Conflict', 410 => 'Gone', 411 => 'Length Required', 412 => 'Precondition Failed', 413 => 'Request Entity Too Large', 414 => 'Request-URI Too Large', 415 => 'Unsupported Media Type', 416 => 'Requested range not satisfiable', 417 => 'Expectation Failed',
    500 => 'Internal Server Error', 501 => 'Not Implemented', 502 => 'Bad Gateway', 503 => 'Service Unavailable', 504 => 'Gateway Time-out', 505 => 'HTTP Version not supported'
  );
  // RFC 2616 states that all unknown HTTP codes must be treated the same as the
  // base code in their class.
  if (!isset($responses[$code])) {
    $code = floor($code / 100) * 100;
  }

  switch ($code) {
    case 200: // OK
    case 304: // Not modified
      break;
    case 301: // Moved permanently
    case 302: // Moved temporarily
    case 307: // Moved temporarily
      $location = $result->headers['Location'];

      if ($retry) {
        $result = drupal_http_request($result->headers['Location'], $headers, $method, $data, --$retry);
        $result->redirect_code = $result->code;
      }
      $result->redirect_url = $location;

      break;
    default:
      $result->error = $text;
  }

  $result->code = $code;
  return $result;
}
