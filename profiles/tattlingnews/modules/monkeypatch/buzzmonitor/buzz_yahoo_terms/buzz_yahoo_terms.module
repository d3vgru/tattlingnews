<?php
define('BM_YAHOO_TERMSAPI_URL', 'http://search.yahooapis.com/ContentAnalysisService/V1/termExtraction');
define('BM_YAHOO_TERMSAPI_APP_ID', 'BuzzMonitor');
define('BM_YAHOO_TERMS_VID', variable_get('buzz_yahoo_terms_vid', -1));

function buzz_yahoo_terms_get_terms($content, $blacklist = array()) {

    $headers = array('Content-Type' => 'application/x-www-form-urlencoded');
    $data    = array(
      'appid' => BM_YAHOO_TERMSAPI_APP_ID,
      'query' => '', //has no sense for our use-case
      'output' => 'php',      
      'context' => $content,
    );

    $data_enc = http_build_query($data, '', '&');
    $uri = BM_YAHOO_TERMSAPI_URL;
    $ret = drupal_http_request($uri, $headers, 'POST', $data_enc);
    if (isset($ret->error)) {
      error_log('YAHOO Terms Extraction returned error: ' . print_r($ret,true));
      return array();
    }

    $result = unserialize($ret->data);
    $result = $result['ResultSet']['Result'];
    
    if (is_array($result) ) {
      $result = array_unique($result);
    }    
    // Remove blacklisted items
    if (is_array($blacklist) && sizeof($blacklist) > 0) {
      foreach ($result as $id => $term) {
        if (in_array($term, $blacklist)) {
          unset($result[$id]);
        }
      }
    }

    $yahoo_terms = array();
    if (is_array($result)) {
      foreach ($result as $id => $term) {
        $t = new stdClass;
        $t->name = $term;
        $yahoo_terms[] = $t;
      }
    }
    
    return $yahoo_terms;
}

function buzz_yahoo_terms_process_node(&$node) {
  
  $blacklist = buzz_yahoo_terms_get_blacklist();
  //$content = $node->field_fulltext[0]['value'];

  $content = $node->title . '<p>' . $node->body;
  $terms = buzz_yahoo_terms_get_terms($content, $blacklist );
    
  if (!is_array($terms)) 
    return;
  
  $vid = buzz_yahoo_terms_vid();
  $vocabs = taxonomy_get_vocabularies($node->type);
  
  if (is_array($vocabs) && sizeof($vocabs) > 0 
      && is_object($vocabs[$vid]) && $vocabs[$vid]->tags == 1 ) { // safety check

    if (is_array($terms)) {
      $yahoo_terms = array();
      foreach($terms as $term) {
        $yahoo_terms[] = $term->name;
      }
      $existing_terms = drupal_explode_tags($node->taxonomy['tags'][$vid]);
      $merged = $existing_terms + $yahoo_terms;
      $node->taxonomy['tags'][$vid] = drupal_implode_tags($merged);    
    }      
  }
  else { //no allowed vocab found. ugh.
    $err_msg = t('ERROR: ' . $node->type . 
      ' does not have appropriate Yahoo Terms vocabulary associated or it is not of free-tagging type (a must)' ); 
    error_log($err_msg);
    return;
  }
}

function buzz_yahoo_terms_nodeapi(&$node, $op) {

  if ( ! in_array($node->type, buzz_yahoo_terms_node_types() ) ) return;
  
  switch ($op) {
    case 'presave':
      buzz_yahoo_terms_process_node($node);
      break;
  }
}

function buzz_yahoo_terms_vid() {
  return BM_YAHOO_TERMS_VID;
}

function buzz_yahoo_terms_node_types() {
  //let's make it little more generic for fun
  $types = array();
  $mention_types = array(buzzmonitor_mention_node_type());
  
  $merged_types = array_merge($types,$mention_types);
  
  return $merged_types;
}

/**
 * @TODO: implement selection of the vocabulary
 */
function yahoo_terms_admin_settings() {
}

/**
 * @TODO: implement blacklist definition. It really needs to be a plugin module
 * since blacklist should be shared among diff. term extractors (Calais and Yahoo and etc.)
 */
function buzz_yahoo_terms_get_blacklist() {
  //return array('economic meltdown');
}

function buzz_yahoo_terms_form_alter (&$form, $form_state, $form_id) {
  $types = buzz_yahoo_terms_node_types(); $allowed_type = FALSE;
  if (is_array($types) && sizeof($types)>0) {
    foreach ( $types as $type ) {
      if ($type . "_node_form" == $form_id) $allowed_type = TRUE;
    }
  }
  
  if (!$allowed_type) return;
  
  /* remove arbitrary and unnecessary (somewhat lame, imho) 
     255 character limit on the Yahoo Terms Vocab, hard-imposed by Taxonomy module **/
  $vid = buzz_yahoo_terms_vid();
  $form['taxonomy']['tags'][$vid]['#maxlength'] = 10000;    
}
