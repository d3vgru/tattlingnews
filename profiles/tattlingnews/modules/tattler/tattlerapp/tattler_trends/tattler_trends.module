<?php

function _ttlr_get_trends() {

  $top_entities = _ttlr_top_entities(5);
//  echo "<pre>".print_r ( $top_entities,true)."</pre>";
  
  return $top_entities;
  
}


function _ttlr_top_topics( $count= 3 ) {

  if (empty($_GET['timeframe']) || $_GET['timeframe'] == 'all') $_GET['timeframe'] = 'week';
  $timeframe = $_GET['timeframe'];


  $entities = _ttlr_tracked_entity_vocabs();
  
  $top_entities = array();

  foreach ($entities as $name => $ent) {
    $vids = array_values($ent);
    $topic_id = $_GET['topic']; 
  
    $query = new stdClass();
    $query->body = "
      SELECT count(tn.vid) as mentions, t.name, t.tid, t.vid, t.name
      FROM {term_node} tn
    ";
    
    $query->joins = array();
    $query->joins[] = "JOIN {node node} ON node.vid=tn.vid";
    $query->joins[] = "JOIN {term_data} t ON tn.tid=t.tid";    
        
    $query->group_by = "GROUP BY (tn.tid)";
    $query->having = "";
    $query->order_by = "ORDER BY mentions desc";
    $query->limit = "LIMIT " . $count;
    
    $query->where = array();
    $query->where[] = "node.type='mention'";
    $query->where[] = strtr("t.vid IN (%vids)", array('%vids' => check_plain(implode(',', $vids))));
    $query->where[] = ttlr_timeframe_2_sqlwhere($timeframe);

    // Filter by topic    
    if (!empty($topic_id) && is_numeric($topic_id) && $topic_id > 0) {
      $query->joins[] = "JOIN {term_node} topic ON topic.vid=node.vid";    
      $query->where[] = " topic.tid in ($topic_id)";
    }

    
    _ttlr_query_parse($query);
    $res = db_query($query->sql);
    $objs = array();
    while ($obj = db_fetch_object($res) ) {
      if (!empty($obj)) {
        $objs[] = $obj;
      }
    }
    
    $data = new stdClass();
    $data->name = $name;
    $data->entities = $objs;
    $top_entities[] = $data;
  }
  
  return  $top_entities;
}


function _ttlr_top_entities( $count= 3 ) {

  if (empty($_GET['timeframe']) || $_GET['timeframe'] == 'all') $_GET['timeframe'] = 'week';
  $timeframe = $_GET['timeframe'];

  $entities = _ttlr_tracked_entity_vocabs();
  
  $top_entities = array();

  foreach ($entities as $name => $ent) {
    $topic_id = $_GET['topic']; 
  
    $query = new stdClass();
    $query->body = "
      SELECT count(tn.vid) as mentions, t.name, t.tid, t.vid, t.name
      FROM {term_node} tn
    ";
    
    $query->joins = array();
    $query->joins[] = "JOIN {node node} ON node.vid=tn.vid";
    $query->joins[] = "JOIN {term_data} t ON tn.tid=t.tid";    
        
    $query->group_by = "GROUP BY (tn.tid)";
    $query->having = "";
    $query->order_by = "ORDER BY mentions desc";
    $query->limit = "LIMIT " . $count;
    
    $query->where = array();
    $query->where[] = "node.type='mention'";
  
    if ($name == 'Topics') {
      $tids = array_values($ent);
      $query->where[] = strtr("tn.tid IN (%tids)", array('%tids' => check_plain(implode(',', $tids))));
    }
    else {
      $vids = array_values($ent);
      $query->where[] = strtr("t.vid IN (%vids)", array('%vids' => check_plain(implode(',', $vids))));
    }
    $query->where[] = ttlr_timeframe_2_sqlwhere($timeframe);

    // Filter by topic    
    if (!empty($topic_id) && is_numeric($topic_id) && $topic_id > 0) {
      $query->joins[] = "JOIN {term_node} topic ON topic.vid=node.vid";    
      $query->where[] = " topic.tid in ($topic_id)";
    }

    
    _ttlr_query_parse($query);
    $res = db_query($query->sql);
    $objs = array();
    $topic_map = ttlr_topicterms_names_map();
    
    while ($obj = db_fetch_object($res) ) {
      if (!empty($obj)) {
        if (array_key_exists($obj->name, $topic_map)) {
          $obj->name = $topic_map[$obj->name];
        }
        
        $objs[] = $obj;
      }
    }
    

    $data = new stdClass();
    if (array_key_exists($name, $topic_map)) {
      $name = $topic_map[$name];
    }
    $data->name = $name;
    $data->entities = $objs;
    $top_entities[] = $data;
  }
  
  return  $top_entities;
}

function _ttlr_tracked_entity_vocabs() {
  
  $entities = variable_get('calais_vocabulary_names', NULL);
  
  $vocabs = array();
  
  if (empty($_GET['topic']) || !is_numeric($_GET['topic'])) { //if not filtering by topic
    $topics =  tattlerui_get_topic_titles('array'); 
    $vocabs['Topics'] = array_keys($topics);
  }
  
  $vocabs['People'] = array($entities['Person']);
  $vocabs['Organizations'] = array($entities['Organization']);  
  $vocabs['Companies'] = array($entities['Company']);    
  $vocabs['Locations'] = array($entities['City'], $entities['ProvinceOrState']);      
  //$vocabs['Events'] = array($entities['EventsFacts']); 
  
  return $vocabs;       
}

function _ttlr_query_parse(&$query) {
  
  $query->sql = $query->body;
  $query->sql .= "\n" . implode( "\n ", $query->joins) . "\n";
  $query->sql .= "WHERE ";
  
  $first_where = TRUE;
  foreach ($query->where as $where) {
    if ($first_where == FALSE && !empty($where)) {
      $query->sql .= ' AND ';
    }
    $first_where = FALSE;     
    if (!empty($where)) {   
      $query->sql .= ' ( ' . $where . ' ) ';
    }
  }
  
  $query->sql .= " \n" . $query->having;
  $query->sql .= " \n" . $query->group_by;  
  $query->sql .= " \n" . $query->order_by;
  $query->sql .= " \n" . $query->limit;
  
}

function ttlr_timeframe_2_sqlwhere($timeframe) {

    if (preg_match('#\d{4}-\d{2}-\d{2}#i', $timeframe)) {
      //There's something wrong with passing timeframe as a query argument. Sorry :( doing manually
      $timeframe = check_plain($timeframe);
      return '(FROM_UNIXTIME(node.created) >= \''.$timeframe.'\' ) AND (FROM_UNIXTIME(node.created) < DATE_ADD(\''.$timeframe.'\',INTERVAL 1 DAY) )';
    }

    if ($timeframe == 'week') {
     return 'FROM_UNIXTIME(node.created) > DATE_SUB(NOW(),INTERVAL 7 DAY)';
    }

    if ($timeframe == 'month') {
     return 'FROM_UNIXTIME(node.created) > DATE_SUB(NOW(),INTERVAL 30 DAY)';
    }

    if ($timeframe == 'sixmonths') {
     return 'FROM_UNIXTIME(node.created) > DATE_SUB(NOW(),INTERVAL 6 MONTH)';
    }

    if ($timeframe == 'year') {
     return 'FROM_UNIXTIME(node.created) > DATE_SUB(NOW(),INTERVAL 1 YEAR)';
    }

}

function _ttlr_term_trend ($tid) {

  $results = _ttlr_term_trend_get_data($tid); 
  
  return $results;
}





function _ttlr_term_trend_get_data($tid) {

  $results = array();

  if (empty($_GET['timeframe']) || $_GET['timeframe'] == 'all') {
    $_GET['timeframe'] = 'week';
  }
  $timeframe = $_GET['timeframe'];  
  $timeframe = db_escape_string($timeframe);
  if (empty($timeframe) || trim($timeframe) == 'all') $timeframe = 'year'; //default to year view.
  
  $topic_id = $_GET['topic_id'];
  
  switch ($timeframe) {
  	case 'week':
  	 $date_format = '%Y%j';
  	 $count = 7;
     break;

  	case 'month':
      $date_format = '%Y%j';
    	$count = 30;
      break;
      
    case 'sixmonths':
      $date_format = '%x%v';
      $count = 24;
      break;
      
    case 'year':
      $date_format = '%Y%m';
      $count = 12;
      break;      
  }

  $query = new stdClass();  
  $query->body = "SELECT count(*) mentions, DATE_FORMAT( FROM_UNIXTIME(node.created), '$date_format') mons
                  FROM {node} node";
  
  $query->joins = array();
  $query->joins[] = 'INNER JOIN {term_node} tn ON tn.nid=node.nid';

  $query->where = array();
  $query->where[] = "tn.tid=$tid";
  $query->where[] = ttlr_timeframe_2_sqlwhere($timeframe);
  
   // Filter by topic    
  if (!empty($topic_id) && is_numeric($topic_id) && $topic_id > 0) {
    $query->joins[] = "JOIN {term_node} topic ON topic.vid=node.vid";    
    $query->where[] = " topic.tid in ($topic_id)";
  } 
  
  $query->group_by = "GROUP BY (mons)";
  $query->having = "";  
  $query->order_by = "ORDER BY mons ASC";
  $query->limit = "LIMIT " . $count;  

  _ttlr_query_parse($query);
  
//  dpm($query->sql);
  
  $res = db_query($query->sql, $date_format);
  $results = array();
  while ($obj=db_fetch_object($res)) {
    $results[$obj->mons] = (int)$obj->mentions;
  }
    
  $data =  ttlr_term_trend_fill_gaps($results, $timeframe);  
    
  return $data;
    
}

/**
* Normalize "days since the start of the year" per MySQL specification. The problem
* is that MySQL returns 001 - 365 and PHP formatter returns 1 - 365, so we need to
* pad PHP one with appropriate number of 0's. sigh :)
*/
function ttlr_trends_days_since_mysql_normalize($timestamp) {
  $period_year = date('Y', $timestamp);
  $period_day = sprintf('%03d', date('z', $timestamp));
  $period = $period_year . $period_day;
  return $period;
}

/** SQL query does not return any results for the time slots
that had zero results. A problem for chart. Oughta fill the gap */
function ttlr_term_trend_fill_gaps($results, $timeframe) {

  static $periods = array(); //it's the same for every chart within one HTTP request. Cache it.
  
  if (in_array($timeframe, array('sixmonths', 'month'))) {
    $skip = TRUE; //skip every other entry (aggregate value), to end-up with reasonable size.
  }
    
  if (sizeof($periods) < 2) { //calculating for the first time per HTTP request.
    switch ($timeframe) {
    	case 'week':
        for ($i=6; $i>=0; $i--) { 
          $timestamp = strtotime("now -{$i} day");
          // Have to normalize in a MySQL-compatible way. sigh.
          $periods[] = ttlr_trends_days_since_mysql_normalize($timestamp);
        }    	
       break;
    
    	case 'month':
        for ($i=29; $i>=0; $i--) { 
          $timestamp = strtotime("now -{$i} day");
          // Have to normalize in a MySQL-compatible way. sigh.
          $periods[] = ttlr_trends_days_since_mysql_normalize($timestamp);          
        }    	
        break;
        
      case 'sixmonths':
        for ($i=23; $i>=0; $i--) { 
          $timestamp = strtotime("now -{$i} week");
          $periods[] = date('YW', $timestamp);
        }
        break;      
              
      case 'year':
        for ($i=11; $i>=0; $i--) { 
          $timestamp = strtotime("now -{$i} month");
          $periods[] = date('Ym', $timestamp);
        }
        break;      
    }
  }
    
  $new_results = array(); 
  foreach ($periods as $period) {
    if (!empty($results[$period])) {      
      $new_results[$period] = $results[$period];
    }
    else {
      $new_results[$period] = 0;
    }
  }
        
  //Let's skip what oughta be skipped now. It only works well for odd-sized arrays, because we can't 
  //divide even-sized arrays into half. Thankfully both 1 month array (30 days) and 6 months array (24 weeks) are even-sized. Booya.
  $i = 0; $last_value = 0; 
  if ($skip) {
    foreach ($periods as $period) {
      if (($i % 2) == 0) {
        $last_value = $new_results[$period];
        unset($new_results[$period]);
      }
      else {
        $new_results[$period] += $last_value;      
      }
      $i++;
    }
  }
  
  //reformat keys
  foreach ($new_results as $period => $value) {
    $key = ttlr_format_period_name($period, $timeframe); //use formatted key
    $new_results[$key] = $value;
    unset($new_results[$period]);
  }  

  return ($new_results);

}

function ttlr_format_period_name($period, $timeframe) {
    switch ($timeframe) {
    	case 'week':
        $year = substr($period, 0,4);
        $day  = substr($period, 4, 3); 
        return (ttlr_nth_day($year, $day));
    
    	case 'month':
        $year = substr($period, 0,4);
        $day  = substr($period, 4); 
        return (ttlr_nth_day($year, $day));
        
      case 'sixmonths':
        $year = substr($period, 0,4);
        $week  = substr($period, 4); 
        return (ttlr_nth_week($year, $week));
        
      case 'year':
        $year = substr($period, 0,4);
        $month  = (int)substr($period, 4); 
        $timestamp = mktime(0, 0, 0, $month, 1, $year);
        return  date('M y', $timestamp);
    }
}


/** Returns a nicely formated date for Nth day of year $year **/
function ttlr_nth_week ($year, $weekno, $format='M jS') {

  $year_start_timestamp = mktime(0, 0, 0, 1, 1, $year);
  $seconds_per_week = 60*60*24*7;
  
  $timestamp = $year_start_timestamp + $seconds_per_week * ($weekno - 1); 
  
  return (date($format, $timestamp));
}

/** Returns a nicely formated date for Nth day of year $year **/
function ttlr_nth_day ($year, $dayno, $format='M jS') {

  $year_start_timestamp = mktime(0, 0, 0, 1, 1, $year);
  $seconds_per_day = 60*60*24;
  
  $timestamp = $year_start_timestamp + $seconds_per_day * ($dayno - 1); 
  
  return (date($format, $timestamp));
}